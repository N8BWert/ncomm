searchState.loadedDescShard("ncomm_publishers_and_subscribers", 0, "NComm Publishers and Subscribers\nLocal Publishers and Subscribers\nNComm Publisher and Subscriber for publishing over Serial …\nA Network Tcp-Based Publisher and Subscriber\nA Network Udp-Based Publisher and Subscriber\nLocal Subscriber that stores incoming data into a buffer …\nLocal subscriber that maps incoming data to into a …\nLocal subscriber that maps incoming data to into a …\nLocal Publisher that utilizes a crossbeam multi publisher …\nLocal Subscriber that utilizes a crossbeam multi …\nLocal subscriber where data has a specific time-to-live …\nClear the data buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new local publisher\nCreate a local subscriber\nCreate a local buffered subscriber\nCreate a local subscriber that uses a map function to map …\nCreate a local subscriber that uses a map function to map …\nCreate a local subscriber with a specific time-to-live of …\nEmbedded-IO Error\nAn error occurred with packing the data\nAn Error regarding publishing serial data\nPublisher that publishes data via a serial device.\nA serial publisher/subscriber capable of both publishing …\nSerial Subscriber that reads data from a serial line\nDestroy the SerialPublisher returning the serial peripheral\nDestroy the SerialSubscriber returning the serial …\nDestroy the SerialPublisherSubscriber returning the serial …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new SerialPublisher from the peripheral\nCreate a new SerialSubscriber from the peripheral\nCreate a new SerialPublisherSubscriber from the peripheral\nstd::io::Error occurred (this can occur on multiple …\nAn error occurred with packing the data\nA Tcp Subscriber that stores incoming data into a …\nA Tcp Subscriber that maps incoming data to its IP address.\nA Tcp Subscriber that stores incoming data stored by IP …\nAn Error when attempting to publish data over a Tcp …\nA Tcp Publisher that publishes data via packing the data …\nA Tcp Subscriber that is set to nonblocking and and listens\nA Tcp Subscriber that subscribes to a TCP stream keeping …\nAdd an address to the whitelist.\nAdd an address to the whitelist.\nAdd an address to the whitelist.\nThe list of addresses to publish to\nClears the data stored in the TcpBufferedSubscriber’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new TcpPublisher\nCreate a new TcpSubscriber bound to a specific address\nCreate a new TcpBufferedSubscriber bound to an address\nCreate a new TcpTTLSubscriber bound to a specific address\nCreate a new TcpMappedSubscriber bound to a specific …\nCreate a new TcpMappedSubscriber bound to a specific …\nCreate a new TcpSubscriber bound to a specific address with\nCreate a new TcpBufferedSubscriber bound to a given …\nCreate a new TcpTTLSubscriber bound to a specific address …\nRemove an address from the whitelist.\nRemove an address from the whitelist\nRemove an address from the whitelist\nThe optional list of whitelisted IPs to listen to\nThe list of whitelisted IPs to accept data from\nThe list of whitelisted IPs to listen to\nstd::io::Error occurred\nAn error occurred wth packing the data\nA Udp Subscriber that stores incoming data into a …\nA UDP Subscriber that maps incoming data into slots in a …\nA UDP Subscriber that maps incoming data into slots in a …\nAn Error with publishing udp packets\nA UDP Publisher that publishes data in a way defined by …\nA UDP Subscriber that is set to non-blocking and updates …\nA UDP Subscriber that updates its internal data …\nThe addresses to send data along.\nClear the buffer contained by the UdpBufferedSubscriber\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new UdpPublisher\nCreate a new UdpSubscriber bound to a specific bind address\nCreate a new UdpBufferedSubscriber bound to a specific …\nCreate a new subscriber bound to a specific bind address\nCreate a new subscriber bound to a specific bind address\nCreate a new subscriber bound to a specific bind address")