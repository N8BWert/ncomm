searchState.loadedDescShard("ncomm_publishers_and_subscribers", 0, "NComm Publishers and Subscribers\nLocal Publishers and Subscribers\nA Network Udp-Based Publisher and Subscriber\nLocal Subscriber that stores incoming data into a buffer …\nLocal subscriber that maps incoming data to into a …\nLocal subscriber that maps incoming data to into a …\nLocal Publisher that utilizes a crossbeam multi publisher …\nLocal Subscriber that utilizes a crossbeam multi …\nLocal subscriber where data has a specific time-to-live …\nClear the data buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new local publisher\nCreate a local subscriber\nCreate a local buffered subscriber\nCreate a local subscriber that uses a map function to map …\nCreate a local subscriber that uses a map function to map …\nCreate a local subscriber with a specific time-to-live of …\nstd::io::Error occurred\nAn error occurred wth packing the data\nA Udp Subscriber that stores incoming data into a …\nA UDP Subscriber that maps incoming data into slots in a …\nA UDP Subscriber that maps incoming data into slots in a …\nAn Error with publishing udp packets\nA UDP Publisher that publishes data in a way defined by …\nA UDP Subscriber that is set to non-blocking and updates …\nA UDP Subscriber that updates its internal data …\nThe addresses to send data along.\nClear the buffer contained by the UdpBufferedSubscriber\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new UdpPublisher\nCreate a new UdpSubscriber bound to a specific bind address\nCreate a new UdpBufferedSubscriber bound to a specific …\nCreate a new subscriber bound to a specific bind address\nCreate a new subscriber bound to a specific bind address\nCreate a new subscriber bound to a specific bind address")